name: Publish Tag

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  create_tag:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          ref: main
          fetch-depth: 0  # Ensure all history is fetched

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get Latest Tag
        id: latest_tag
        run: |
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          echo "::set-output name=latest_tag::$latest_tag"

      - name: Compute New Tag
        id: new_tag
        run: |
          latest_tag="${{ steps.latest_tag.outputs.latest_tag }}"
          IFS='.' read -r -a parts <<< "${latest_tag//v/}"
          major="${parts[0]}"
          minor="${parts[1]}"
          patch="${parts[2]}"
          
          case ${{ github.event.inputs.version_type }} in
            major)
              new_tag="v$((major+1)).0.0"
              ;;
            minor)
              new_tag="v$major.$((minor+1)).0"
              ;;
            patch)
              new_tag="v$major.$minor.$((patch+1))"
              ;;
            *)
              echo "Error: Invalid version type '${{ github.event.inputs.version_type }}'."
              exit 1
              ;;
          esac
          
          echo "New tag: $new_tag"
          echo "::set-output name=new_tag::$new_tag"

      - name: Check if New Tag Exists
        run: |
          if git rev-parse -q --verify "refs/tags/${{ steps.new_tag.outputs.new_tag }}"; then
            echo "Error: Tag '${{ steps.new_tag.outputs.new_tag }}' already exists."
            exit 1
          fi

      - name: Get Commits Since Last Tag
        id: commit_messages
        run: |
          latest_tag="${{ steps.latest_tag.outputs.latest_tag }}"
          if [ "$latest_tag" == "v0.0.0" ]; then
            commit_messages=$(git log --oneline)
          else
            commit_messages=$(git log ${latest_tag}..HEAD --oneline)
          fi
          echo "::set-output name=commit_messages::$commit_messages"

      - name: Create tag
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git tag -a ${{ steps.new_tag.outputs.new_tag }} -m "${{ steps.commit_messages.outputs.commit_messages }}"
          git push origin ${{ steps.new_tag.outputs.new_tag }}